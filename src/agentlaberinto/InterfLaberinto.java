/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package agentlaberinto;


import static agentlaberinto.AgentLaberinto.mensaje;
import static agentlaberinto.AgentLaberinto.ruta_txt;
import java.awt.Color;
import java.awt.Graphics;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import static java.lang.Thread.sleep;
import java.util.StringTokenizer;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author mosvi
 */
public class InterfLaberinto extends javax.swing.JFrame {

    /**
     * Creates new form InterfLaberinto
     */
      
    public static char[][] mat2= new char[AgentLaberinto .limY][AgentLaberinto .limX];
    public Graphics graphic;

    public InterfLaberinto() {
       
        initComponents();
        
        //Panel p= new Panel();
        this.setFocusable(true);
        this.setBounds(0, 0, 800, 800);
        this.setLocationRelativeTo(null);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFilas = new javax.swing.JTextField();
        jTextColumnas = new javax.swing.JTextField();
        jTextFilaf = new javax.swing.JTextField();
        jTextColumnaf = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Laberinto");

        jLabel2.setBackground(new java.awt.Color(0, 102, 102));
        jLabel2.setForeground(new java.awt.Color(0, 51, 102));
        jLabel2.setText(":V");

        jTextColumnas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextColumnasActionPerformed(evt);
            }
        });

        jTextFilaf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFilafActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Inicio");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setText("Meta");

        jButton1.setText("Solucion");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(32, 32, 32))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFilas, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jTextColumnas, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFilaf, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextColumnaf, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(22, 22, 22))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFilas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextColumnas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(5, 5, 5)
                .addComponent(jTextFilaf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextColumnaf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton1)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextColumnasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextColumnasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextColumnasActionPerformed

    private void jTextFilafActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFilafActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFilafActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(InterfLaberinto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(InterfLaberinto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(InterfLaberinto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(InterfLaberinto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//        char[][] mat= new char[4][4];
//        char[][] save= new char[4][4];
//        nodoar ar = new nodoar("INICIO", null);
//        List ob = new List();
//        lista ko = new lista();
//       
//            public void run() {
//             InterfLaberinto inte = new InterfLaberinto();
//             AgentLaberinto los= new AgentLaberinto();
//             inte.setVisible(true);
//   
//
//                    cargar_txt(mat);
//                    for (int i = 0; i < 4; i++) {
//                    for (int j = 0; j < 4; j++) {
//                        save[i][j]=mat[i][j];
//
//                    }
//                }
//         
//                 dibujar(mat);
//            }
//        });
//    }
//     public static void mensaje(String texto){
//        JOptionPane.showMessageDialog(null, texto);
//    }
//      public static void cargar_txt(char mat[][]){
//         String v1,v2,v3,v4;
//         int i=0,j=0;
//         
//         //char largo
//        File ruta = new File(ruta_txt);
//        try{
//            
//            FileReader fi = new FileReader(ruta);
//            BufferedReader bu = new BufferedReader(fi);
//            
//            
//            String linea = null;
//            while((linea = bu.readLine())!=null){
//             
//              StringTokenizer st = new StringTokenizer(linea, ",|");
//               v1=st.nextToken();
//               v2=st.nextToken();
//               v3=st.nextToken();
//               v4=st.nextToken();
//               
//                System.out.println(v1+v2+v3+v4);
//             
//               if(v1.equals("1") && v2.equals("2") && v3.equals("3") && v4.equals("4")){
//                  mat[i][j]='A';
//               }
//                if(v1.equals("1") && v2.equals(" ") && v3.equals("3") && v4.equals(" ")){
//                       mat[i][j]='B';
//               }
//                if(v1.equals("1") && v2.equals("2") && v3.equals(" ") && v4.equals(" ")){
//                       mat[i][j]='C';
//               }
//                if(v1.equals(" ") && v2.equals("2") && v3.equals("3") && v4.equals(" ")){
//                       mat[i][j]='D';
//               }
//                if(v1.equals("1") && v2.equals(" ") && v3.equals(" ") && v4.equals("4")){
//                       mat[i][j]='E';
//               }
//                if(v1.equals(" ") && v2.equals(" ") && v3.equals("3") && v4.equals("4")){
//                       mat[i][j]='F';
//               }
//                if(v1.equals(" ") && v2.equals("2") && v3.equals(" ") && v4.equals("4")){
//                       mat[i][j]='G';
//               }
//                 if(v1.equals("1") && v2.equals("2") && v3.equals(" ") && v4.equals("4")){
//                       mat[i][j]='H';
//               }
//                 if(v1.equals(" ") && v2.equals("2") && v3.equals("3") && v4.equals("4")){
//                       mat[i][j]='I';
//               }
//                 if(v1.equals("1") && v2.equals("2") && v3.equals("3") && v4.equals(" ")){
//                       mat[i][j]='J';
//               }
//                  if(v1.equals("1") && v2.equals(" ") && v3.equals("3") && v4.equals("4")){
//                       mat[i][j]='K';
//               }
//                   if(v1.equals("0") && v2.equals("0") && v3.equals("0") && v4.equals("0")){
//                       mat[i][j]='M';
//               }
//                    if(v1.equals("1") && v2.equals(" ") && v3.equals(" ") && v4.equals(" ")){
//                       mat[i][j]='1';
//               }
//                 if(v1.equals(" ") && v2.equals("2") && v3.equals(" ") && v4.equals(" ")){
//                       mat[i][j]='2';
//               }
//                  if(v1.equals(" ") && v2.equals(" ") && v3.equals("3") && v4.equals(" ")){
//                       mat[i][j]='3';
//               }
//                   if(v1.equals(" ") && v2.equals(" ") && v3.equals(" ") && v4.equals("4")){
//                       mat[i][j]='4';
//               }
//               j++;
//                if(j==4){
//                    j=0;
//                    i++;
//                }
//                
//                
//             
//            }
//            bu.close();
//        }catch(Exception ex){
//            mensaje("Error al cargar archivo: "+ex.getMessage());
//            System.out.println(ex.getMessage());
//        }
//        
//    }
//   
//    
    public void paint(Graphics g){
        super.paint(g);
       
         int x1 = 40, y1=80,x2=40, y2=40;
         int b=120,gg=200;
//          g.drawRect(x1,y1,x2,y2);
//           g.drawRect(x1+40,y1,x2,y2);
//           g.drawRect(x1+80,y1,x2,y2);
//              
//          g.drawLine(160,80,200,80);
//          g.drawLine(160,120,200,120);
//          
//          g.drawLine(200,80,200,120);
//          g.drawLine(240,80,240,120);
//          
//          g.drawLine(240,80,280,80);
//         g.drawLine(240,80,240,120);
//           
//            g.drawLine(280,120,320,120); 
//           g.drawLine(280,80,280,120);
//             

            char yw = 0;
       
        for (int i = 0; i < AgentLaberinto .limY ; i++) {
            x1=40;
            for (int j = 0; j < AgentLaberinto .limX; j++) {
                        yw=mat2[i][j];
                        switch(yw){
                           case 'A':
                           g.setColor(Color.DARK_GRAY);
                              
                           g.drawRect(x1,y1,x2,y2);
                          
                           break;
                            
                           case 'B':
                            g.setColor(Color.DARK_GRAY);
                            
                            g.drawLine(x1,y1,x1,b);
                            g.drawLine(x1+40,y1,x1+40,b);

                           break;
                           case 'G':
                            g.drawLine(x1,y1,x1+40,y1);
                            g.drawLine(x1,40+y1,x1+40,y1+40);

                           break;
                           case 'C':
                            g.drawLine(x1,y1,x1+40,y1);  
                            g.drawLine(x1,y1,x1,y1+40);
                           break;
                           case 'D':
                            g.drawLine(x1,y1,x1+40,y1); 
                            g.drawLine(x1+40,y1,x1+40,y1+40);
                           break;
                            case 'E':
                            g.drawLine(x1,y1,x1,y1+40);
                            g.drawLine(x1,y1+40,x1+40,y1+40);  
                           
                           break;
                           case 'F':
                             g.drawLine(x1+40,y1,x1+40,y1+40); 
                             g.drawLine(x1,y1+40,x1+40,y1+40);    
                           break;       
                           case 'H':
                            g.drawLine(x1,y1,x1+40,y1);  
                            g.drawLine(x1,y1,x1,y1+40);
                             g.drawLine(x1,y1+40,x1+40,y1+40); 
                           break;
                             case 'I':
                            g.drawLine(x1,y1,x1+40,y1); 
                            g.drawLine(x1+40,y1,x1+40,y1+40);
                             g.drawLine(x1,y1+40,x1+40,y1+40);    
                           break;
                             case 'J':
                             g.drawLine(x1,y1,x1+40,y1);  
                            g.drawLine(x1,y1,x1,b);
                            g.drawLine(x1+40,y1,x1+40,b);
                            
                             break;
                             case 'K':
                            g.drawLine(x1,y1,x1,b);
                            g.drawLine(x1+40,y1,x1+40,b);
                             g.drawLine(x1,y1+40,x1+40,y1+40);  
                             break;
                             case '1':
                                 g.drawLine(x1,y1,x1,y1+40);
                             break;
                             case '2':
                             g.drawLine(x1,y1,x1+40,y1);
                             break;
                             case '3':
                                  g.drawLine(x1+40,y1,x1+40,y1+40);    
                              break;
                             case '4':
                                g.drawLine(x1,40+y1,x1+40,y1+40);
                             break;
                           default:
                           break; 
                         } 
                      
                        x1=x1+40;
            }
             b=b+40;
             y1=y1+40;
        }
      
     
    
    }
//    public void Rect(Graphics g,int x1,int y1,int x2,int y2 ){
//       
//         g.setColor(Color.DARK_GRAY);
//         g.drawRect(x1,y1,x2,y2);
//       
//         
//         
//    }
//    public void linea(Graphics g){
//         g.setColor(Color.DARK_GRAY);
//         g.drawLine(0,70,100,70);
//         paint(g);
//    }
    public static void dibujar(char lo[][]){
       
        System.out.println("dibujar");
        for (int i = 0; i < AgentLaberinto .limY; i++) {
            for (int j = 0; j < AgentLaberinto .limX; j++) {
                    mat2[i][j]=lo[i][j];
 
               
            }
        }
    }
    public void movelabe(int f,int c){
            new Thread(){
            public void run(){
                int x=f; 
                int y=c;
                switch(f){
                    case 0:
                       y=60;
                    break;
                     case 1:
                        y=100;
                    break;
                      case 2:
                       y=140;
                      
                    break;
                     case 3:
                       y=180;
                    break;
                }
                 switch(c){
                    case 0:
                       x=50;
                    break;
                     case 1:
                        x=90;
                    break;
                      case 2:
                       x=130;
                      
                    break;
                     case 3:
                       x=170;
                    break;
                     default:
                         
                     break;
                }
                jLabel2.setLocation(x,y);
                repintar();
              
                
                    try{
                        sleep(80);
                    }catch(Exception e){
                    
                    }
                
            }
        }.start();
    
    }
      public void movelabe2(String est,int f, int c){
            new Thread(){
            public void run(){
                int x= jLabel2.getX(); 
                int y= jLabel2.getY();
              
                switch(est){
                    case "ABAJO":
                      y=y+50;
                    break;
                     case "ARRIBA":
                      y=y-50;
                    break;
                    case "IZQUIERDA":
                      x=x-40;
                      
                    break;
                     case "DERECHA":
                      x=x+40;
                    break;
                    
                     case "ABJIZQ":
                       y=y+50;
                       x=x-40;

                     break;
                     
                    case "ABJDER":
                      y=y+50;
                      x=x+40;
                    break;
                    case "ARBIZQ":
                     y=y-50;
                     x=x-40;
                      
                    break;
                    case "ARBDER":
                    y=y-50;
                    x=x+40;
                    break;
                   
                }
                 
                jLabel2.setLocation(x,y);
                posci(f,c);
                repintar();
              
                
                    try{
                        sleep(80);
                    }catch(Exception e){
                    
                    }
                
            }
        }.start();
    
    }
    public void posci(int f,int c){
          new Thread(){
            public void run(){
                int x=40; 
                int y=50;
                if(f>0){
                    for (int i = 0; i < f; i++) {
                        y=y+40;
                    }
                }else{
                    y=40;
                }
                
                 if(c>0){
                    for (int i = 0; i < c; i++) {
                        x=x+40;
                    }
                }else{
                    x=40;
                 }
//                }
//                switch(f){
//                    case 0:
//                       y=60;
//                    break;
//                     case 1:
//                        y=100;
//                    break;
//                      case 2:
//                       y=140;
//                      
//                    break;
//                     case 3:
//                       y=180;
//                    break;
//                }
//                 switch(c){
//                    case 0:
//                       x=50;
//                    break;
//                     case 1:
//                        x=90;
//                    break;
//                      case 2:
//                       x=130;
//                      
//                    break;
//                     case 3:
//                       x=170;
//                    break;
//                }
                jLabel2.setLocation(x,y);
                repintar();
              
                
                    try{
                        sleep(80);
                    }catch(Exception e){
                    
                    }
                
            }
        }.start();
    }
    public void posci2(int f,int c){
          new Thread(){
            public void run(){
                
                jLabel2.setLocation( jLabel2.getX(),jLabel2.getY());
                repintar();
              
                
                    try{
                        sleep(80);
                    }catch(Exception e){
                    
                    }
                
            }
        }.start();
    }
//    public void mover(int f,int c){
//      
//        System.out.println( jLabel2.getX()+" LAbel "+jLabel2.getY());
//          new Thread(){
//            public void run(){
//                int x=f; 
//                int y=c;
//                switch(f){
//                    case 1:
//                        System.out.println("etro1");
//                      jLabel2.setLocation(164,100);
//                      repintar();
//                      
//                    break;
//                     case 2:
//                        System.out.println("etro2");
//                        jLabel2.setLocation(110,100);
//                         repintar();
//                      
//                    break;
//                      case 4:
//                        System.out.println("etro3");
//                      jLabel2.setLocation(164,130);
//                      repintar();
//                      
//                    break;
//                     case 5:
//                        System.out.println("etro4");
//                        jLabel2.setLocation(110,130);
//                         repintar();
//                      
//                    break;
//                }
//              
//                
//                    try{
//                        sleep(80);
//                    }catch(Exception e){
//                    
//                    }
//                
//            }
//        }.start();
//    }
    void repintar(){
    Graphics g=getGraphics();
    //usar el contexto gráfico g
    super.paint(g);
    int x1 = 40, y1=80,x2=40, y2=40;
    int b=120,gg=200;

    char yw = 0;
      
        for (int i = 0; i < AgentLaberinto .limY; i++) {
            x1=40;
            for (int j = 0; j < AgentLaberinto .limX; j++) {
                        yw=mat2[i][j];
                        switch(yw){
                           case 'A':
                           g.setColor(Color.DARK_GRAY);
                              
                           g.drawRect(x1,y1,x2,y2);
                          
                           break;
                            
                           case 'B':
                            g.setColor(Color.DARK_GRAY);
                            
                            g.drawLine(x1,y1,x1,b);
                            g.drawLine(x1+40,y1,x1+40,b);

                           break;
                           case 'G':
                            g.drawLine(x1,y1,x1+40,y1);
                            g.drawLine(x1,40+y1,x1+40,y1+40);

                           break;
                           case 'C':
                            g.drawLine(x1,y1,x1+40,y1);  
                            g.drawLine(x1,y1,x1,y1+40);
                           break;
                           case 'D':
                            g.drawLine(x1,y1,x1+40,y1); 
                            g.drawLine(x1+40,y1,x1+40,y1+40);
                           break;
                            case 'E':
                            g.drawLine(x1,y1,x1,y1+40);
                            g.drawLine(x1,y1+40,x1+40,y1+40);  
                           
                           break;
                           case 'F':
                             g.drawLine(x1+40,y1,x1+40,y1+40); 
                             g.drawLine(x1,y1+40,x1+40,y1+40);    
                           break;       
                           case 'H':
                            g.drawLine(x1,y1,x1+40,y1);  
                            g.drawLine(x1,y1,x1,y1+40);
                             g.drawLine(x1,y1+40,x1+40,y1+40); 
                           break;
                             case 'I':
                            g.drawLine(x1,y1,x1+40,y1); 
                            g.drawLine(x1+40,y1,x1+40,y1+40);
                             g.drawLine(x1,y1+40,x1+40,y1+40);    
                           break;
                             case 'J':
                             g.drawLine(x1,y1,x1+40,y1);  
                            g.drawLine(x1,y1,x1,b);
                            g.drawLine(x1+40,y1,x1+40,b);
                            
                             break;
                             case 'K':
                            g.drawLine(x1,y1,x1,b);
                            g.drawLine(x1+40,y1,x1+40,b);
                             g.drawLine(x1,y1+40,x1+40,y1+40);  
                             break;
                             case '1':
                                 g.drawLine(x1,y1,x1,y1+40);
                             break;
                             case '2':
                             g.drawLine(x1,y1,x1+40,y1);
                             break;
                             case '3':
                                  g.drawLine(x1+40,y1,x1+40,y1+40);    
                              break;
                             case '4':
                                g.drawLine(x1,40+y1,x1+40,y1+40);
                             break;
                           default:
                           break; 
                         } 
                      
                        x1=x1+40;
            }
             b=b+40;
             y1=y1+40;
        }
      
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    public static javax.swing.JTextField jTextColumnaf;
    public static javax.swing.JTextField jTextColumnas;
    public static javax.swing.JTextField jTextFilaf;
    public static javax.swing.JTextField jTextFilas;
    // End of variables declaration//GEN-END:variables
}
